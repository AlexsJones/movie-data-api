// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"gorm.io/gorm"
	"github.com/lib/pq"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"

)

// Error defines model for error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// This has been modified to work between OpenAPI and gorm ---------------------------
type Movie struct {
	gorm.Model
	Cast   pq.StringArray `json:"cast" gorm:"type:text[]"`
	Genres pq.StringArray `json:"genres" gorm:"type:text[]"`
	Title  string   `json:"title"`
	Year   int64    `json:"year"`
}
// ------------------------------------------------------------------------------------

// UploadMovieJSONBody defines parameters for UploadMovie.
type UploadMovieJSONBody = map[string]interface{}

// UploadMovieJSONRequestBody defines body for UploadMovie for application/json ContentType.
type UploadMovieJSONRequestBody = UploadMovieJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a movie directly via the API
	// (POST /movie)
	UploadMovie(ctx echo.Context) error
	// Get Movies by cast member
	// (GET /movies/castmember/{castmember})
	GetMovieByCastMember(ctx echo.Context, castmember string) error
	// Get Movies by genre
	// (GET /movies/genre/{genre})
	GetMovieBygenre(ctx echo.Context, genre string) error
	// Get Movies by name
	// (GET /movies/name/{name})
	GetMovieByName(ctx echo.Context, name string) error
	// Get Movies by year
	// (GET /movies/year/{year})
	GetMovieByYear(ctx echo.Context, year int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UploadMovie converts echo context to params.
func (w *ServerInterfaceWrapper) UploadMovie(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadMovie(ctx)
	return err
}

// GetMovieByCastMember converts echo context to params.
func (w *ServerInterfaceWrapper) GetMovieByCastMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "castmember" -------------
	var castmember string

	err = runtime.BindStyledParameterWithLocation("simple", false, "castmember", runtime.ParamLocationPath, ctx.Param("castmember"), &castmember)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter castmember: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMovieByCastMember(ctx, castmember)
	return err
}

// GetMovieBygenre converts echo context to params.
func (w *ServerInterfaceWrapper) GetMovieBygenre(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "genre" -------------
	var genre string

	err = runtime.BindStyledParameterWithLocation("simple", false, "genre", runtime.ParamLocationPath, ctx.Param("genre"), &genre)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter genre: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMovieBygenre(ctx, genre)
	return err
}

// GetMovieByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetMovieByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMovieByName(ctx, name)
	return err
}

// GetMovieByYear converts echo context to params.
func (w *ServerInterfaceWrapper) GetMovieByYear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "year", runtime.ParamLocationPath, ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMovieByYear(ctx, year)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/movie", wrapper.UploadMovie)
	router.GET(baseURL+"/movies/castmember/:castmember", wrapper.GetMovieByCastMember)
	router.GET(baseURL+"/movies/genre/:genre", wrapper.GetMovieBygenre)
	router.GET(baseURL+"/movies/name/:name", wrapper.GetMovieByName)
	router.GET(baseURL+"/movies/year/:year", wrapper.GetMovieByYear)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+SWz2/TMBTH/5XowTFqyjo45MZAmia0gZA4oGmHt+S19ZTY5vmlUlT1f0e2kzZrU9TC",
	"xGWXxI39fn0/z67XUJjaGk1aHORrcMWSagxDYjbsB5aNJRZF4XNNzuGC/FBaS5CDE1Z6AZtN2n8xj09U",
	"CGxSqM1K0aGTAp34txKq3YirrSdkxtb/XpDmaHu6jSipaHRlSxhKmxuuUSAHpWV2AVsXSgstiENNTL8a",
	"xVRCft957OzTWMY2t4eD+r250nMTcojJwK1XJPmMgsnHbzeQworYKaMhh+lkOnnn0zOWNFoFOcwm08kM",
	"UrAoy1B0tlPURA29rijK6JsScvhhK4NlCAIxd3JyZco2yG60kA5WaG2limCXPTkfvof/TOO3THPI4U22",
	"a5Os65Euk81I1UE1Z412EdnFdHpW+BOi+hgluYKVlaheFLYJ9VOZuKYoyLl5U1WhGS5fMIe4NUZyuNEr",
	"rFSZhCSTEgV96Pf/J7QQa6wSR7wiTvqFKbimrpHbbXMk2OenmAqp2mSlMJElhYb0FlFkl/n+rql+JM7W",
	"u/HG57igUMjzHK5JOtePbeINkmgB6V6XXpMEXFftJ3Ry2y+yyFiTEDvI7/edfydpWEf/zgfwpkm0deA3",
	"GuRhn0AKGmvfkbucYbiPhRtKB3rvn2MP/9i+f7V7ulPrEOzXL7F9Lw/1vjOSzE2jyz3OnsPtVqchiCHd",
	"cGxl6/A6kWlY+wea/fx5IHurEYL91KuFFwUYYvPKZGv/PBFakPI4s7s4fR6yzmiEWBft1QIL9Q95+btC",
	"tvbPE3l1l4tjvH7G6fN4dT5HeHUzx3kN70gfLsfuSEcIvrCwIdFALP7DxbobriCHpYjNs6wyBVZL4yRD",
	"q7LVDDYPm98BAAD//+jImxziCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
